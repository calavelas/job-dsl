import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*

jenkins = Jenkins.instance

def projectName = "next" //{projectName -> Ex next}
def environments = [
  	'dev' : ['Build-Deploy'],
    'sit' : ['Build-Deploy']
]

def String[] allJobs = jenkins.getAllItems(Job.class).fullName
def String[] allItems = jenkins.getAllItems(Item.class).fullName

def targetJobs = [
    'backend/channel-api/api-microservice1',
    'backend/channel-api/api-microservice2',
    'backend/channel-api/api-microservice3',
    'backend/channel-api/api-microservice4',
    'backend/batch/batch-job1',
    'backend/batch/batch-job2',
    'backend/common-api/api-microservice-common1',
    'backend/common-api/api-microservice-common2'
]

// def feJobs = [
// 	'frontend/back-office-web'
// ]

println("Checking Project environment")
environments.each { environmentsMap ->
  def environment = environmentsMap.getKey() //{environment} -> Ex : dev
  def subJobs = environments[environment] //{subJob -> Ex : Build,Deploy,Build-Deploy}
  def environmentFolder = projectName+"-"+environment //{environmentFolder} -> Ex : next-dev
  println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  println "projectName : ${projectName}"
  println "environment : ${environment}"
  println "Subjob :  ${subJobs}"
  println "============================"

  if (jenkins.getItemByFullName("${projectName}/${environmentFolder}") == null) {
    println("Environment folder not found, Creating Folder : ${projectName}/${environmentFolder}")
    println "============================"
    def folderStructure = jenkins.getItemByFullName("${projectName}/pipeline-management/pipeline-template/folder-structure")
    def tempTargetPath =  jenkins.getItemByFullName(projectName)
    jenkins.copy(folderStructure, environmentFolder)
    def tempFolder = jenkins.getItemByFullName(environmentFolder)
    Items.move(tempFolder, tempTargetPath)
  }

  def existingJobs = allJobs.findAll { job -> job.contains(environmentFolder) }
  def existingItems = allItems.findAll { job -> job.contains(environmentFolder)}
  println "existingJobs :  ${existingJobs}"
  println "============================"          
  println "existingItems :  ${existingItems}"
  println "============================"
  
  targetJobs.each { job ->

    if(!existingJobs.any { existingJob -> existingJob.contains(job) } ) {
      
      def mainServiceType = job.split('/')[0] //{mainServiceType -> Ex : backend}
      def subServiceType = job.split('/')[1] //{subServiceType -> Ex : channel-api}
      def serviceName = job.split('/')[-1] //{subServiceType -> Ex : channel-api}
      println "Environment Folder :  ${environmentFolder}"
      println "Starting Job :  ${mainServiceType}/${subServiceType}/${serviceName}"
      println "mainServiceType :  ${mainServiceType}"
      println "subServiceType :  ${subServiceType}"
      println "serviceName :  ${serviceName}"

      // def templateSubFolder = ''
      // switch (mainServiceType) {
      // 	case 'frontend':
      //   	templateSubFolder = 'frontend'
      //   	break
      //   default:
      //   	templateSubFolder = 'microservice'
      //   	break
      // }
      

      def template = jenkins.getItemByFullName("${projectName}/pipeline-management/pipeline-template/template-${environment}/${subServiceType}")
      println "templatePath : ${template}"
      
      def targetPath = jenkins.getItemByFullName("${projectName}/${environmentFolder}/${mainServiceType}/${subServiceType}")
      println "targetPath : ${targetPath}" //next/dev/backend/channel-api/mobile-profiles/test
    
      try {
         
        jenkins.copy(template, serviceName)
        def temp = jenkins.getItemByFullName(serviceName)
        Items.move(temp, targetPath)
        println "Created : ${environmentFolder}/${job}"
        
        // switch (mainServiceType) {
        //   case 'frontend':
        //       subJobs = ['Deploy']
        //       break
        //   default:
        //       break
        // }
        
        subJobs.each { subJob ->
          def tempSubJobPath = "${projectName}/${environmentFolder}/${mainServiceType}/${subServiceType}/${serviceName}/${subJob}"
          def tempSubJob = jenkins.getItemByFullName(tempSubJobPath)
          tempSubJob.save()
          println "Saved subJob parameter : ${subJob}"
          println "============================"                                    
        }
        
      } catch (Exception err) {
        
        def temp = jenkins.getItemByFullName(serviceName)
        println err.message
        Items.delete(temp)
        
      }
    } 
  }
}
